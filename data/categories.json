[
    {
      "id": "01",
      "name": "Procedural languages",
      "details": "Procedural languages are based on the data viewing range of a code statement. Examples include Ada, BASIC, C/C++ and JavaScript."
    },
    {
      "id": "02",
      "name": "Functional languages",
      "details": "Functional languages use stored data to perform recursive functions, which execute a process and then repeat it to solve any errors that arise during programming. Examples include Agda, Cuneiform, PureScript and APL."
    },
    {
      "id": "03",
      "name": "Machine languages",
      "details": "Machine languages are made up of binary code, which is a series 0s and 1s that symbolize text or instructions for a computer program. One example of a machine language is Fortran."
      
    },
    {
      "id": "04",
      "name": "Assembly languages",
      "details": "Assembly languages work in a similar way to machine languages by using short mnemonic codes to give the computer instructions. Examples include Lotus 1-2-3 and Turbo Pascal."
    },
    {
      "id": "05",
      "name": "Data-oriented languages",
      "details": "Logic programming languages add restrictions to statements made by developers that cause the computer to consider the possible outcomes of different actions. Examples include Prolog, ASP and Datalog."
    },
    {
      "id": "06",
      "name": "Scripting languages",
      "details": "Data-oriented languages offer different ways to search and edit entity-relationship tables. Examples include Clarion, Gremlin, WebDNA and Wolfram Language."
    },
    {
      "id": "07",
      "name": "Declarative languages",
      "details": "Companies use business-oriented languages to work with large quantities of data across a variety of different systems. Examples include SQL and COBOL."
    },
    {
      "id": "08",
      "name": "All languages",
      "details": "Do You Watching or Reading our Computer Programming Tutorial, Please Click On Learn More Courses"
    }
  ]